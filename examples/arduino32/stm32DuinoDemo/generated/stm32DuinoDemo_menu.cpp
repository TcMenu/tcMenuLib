/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "stm32DuinoDemo_menu.h"
#include "../ThemeMonoInverse.h"

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "TcTT PSU", "ecd5607f-55eb-4252-a512-aab769452dd3" };
TcMenuRemoteServer remoteServer(applicationInfo);
HalStm32EepromAbstraction glBspRom;
EepromAuthenticatorManager authManager(4);
U8G2_SSD1306_128X64_NONAME_F_4W_HW_SPI gfx(U8G2_R0, PF13, PD15, PF12);
U8g2Drawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
EthernetServer server(3333);
EthernetInitialisation ethernetInitialisation(&server);
EthernetTagValTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, ethernetInitialisation);

// Global Menu Item declarations
const char enumStrDecimalStep_0[] = "1x";
const char enumStrDecimalStep_1[] = "2x";
const char enumStrDecimalStep_2[] = "4x";
const char* const enumStrDecimalStep[]  = { enumStrDecimalStep_0, enumStrDecimalStep_1, enumStrDecimalStep_2 };
const EnumMenuInfo minfoDecimalStep = { "Decimal Step", 16, 23, 2, onDecimalStepChange, enumStrDecimalStep };
EnumMenuItem menuDecimalStep(&minfoDecimalStep, 0, nullptr, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoDecimal = { "Decimal", 1, 2, 1000, decimalDidChange, 0, 10, "d" };
AnalogMenuItem menuDecimal(&minfoDecimal, 0, &menuDecimalStep, INFO_LOCATION_PGM);
const AnyMenuInfo minfoRuntimesLgeNum1 = { "Lge Num1", 18, 0xffff, 0, largeNumDidChange };
EditableLargeNumberMenuItem menuRuntimesLgeNum1(&minfoRuntimesLgeNum1, LargeFixedNumber(9, 3, 0U, 0U, false), true, nullptr, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoRuntimesHalves1 = { "Halves1", 17, 0xffff, 255, NO_CALLBACK, 0, 2, "dB" };
AnalogMenuItem menuRuntimesHalves1(&minfoRuntimesHalves1, 0, &menuRuntimesLgeNum1, INFO_LOCATION_PGM);
const char pgmStrRuntimesAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuRuntimesAuthenticator(pgmStrRuntimesAuthenticatorText, NO_CALLBACK, 15, &menuRuntimesHalves1);
const char pgmStrRuntimesIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuRuntimesIoTMonitor(pgmStrRuntimesIoTMonitorText, 14, &menuRuntimesAuthenticator);
const AnyMenuInfo minfoRuntimesCustomList = { "Custom List", 13, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuRuntimesCustomList(&minfoRuntimesCustomList, 0, fnRuntimesCustomListRtCall, &menuRuntimesIoTMonitor, INFO_LOCATION_PGM);
const AnyMenuInfo minfoRuntimesText = { "Text", 12, 18, 0, NO_CALLBACK };
TextMenuItem menuRuntimesText(&minfoRuntimesText, "", 5, &menuRuntimesCustomList, INFO_LOCATION_PGM);
const SubMenuInfo minfoRuntimes = { "Runtimes", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackRuntimes(&minfoRuntimes, &menuRuntimesText, INFO_LOCATION_PGM);
SubMenuItem menuRuntimes(&minfoRuntimes, &menuBackRuntimes, &menuDecimal, INFO_LOCATION_PGM);
extern char ramDataSet[];
const AnyMenuInfo minfoMoreItemsScroll = { "Scroll", 10, 0xffff, 0, NO_CALLBACK };
ScrollChoiceMenuItem menuMoreItemsScroll(&minfoMoreItemsScroll, 0, ramDataSet, 10, 5, nullptr, INFO_LOCATION_PGM);
const FloatMenuInfo minfoMoreItemsNumber = { "Number", 9, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuMoreItemsNumber(&minfoMoreItemsNumber, 0.0, &menuMoreItemsScroll, INFO_LOCATION_PGM);
const AnyMenuInfo minfoMoreItemsPressMe = { "Save", 8, 0xffff, 0, saveWasPressed };
ActionMenuItem menuMoreItemsPressMe(&minfoMoreItemsPressMe, &menuMoreItemsNumber, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoMoreItemsPower = { "Power", 7, 17, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuMoreItemsPower(&minfoMoreItemsPower, false, &menuMoreItemsPressMe, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoMoreItemsToppings = { "Toppings", 6, 16, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuMoreItemsToppings(&minfoMoreItemsToppings, false, &menuMoreItemsPower, INFO_LOCATION_PGM);
const char enumStrMoreItemsOptions_0[] = "Pizza";
const char enumStrMoreItemsOptions_1[] = "Pasta";
const char enumStrMoreItemsOptions_2[] = "Salad";
const char* const enumStrMoreItemsOptions[]  = { enumStrMoreItemsOptions_0, enumStrMoreItemsOptions_1, enumStrMoreItemsOptions_2 };
const EnumMenuInfo minfoMoreItemsOptions = { "Options", 5, 14, 2, NO_CALLBACK, enumStrMoreItemsOptions };
EnumMenuItem menuMoreItemsOptions(&minfoMoreItemsOptions, 0, &menuMoreItemsToppings, INFO_LOCATION_PGM);
const SubMenuInfo minfoMoreItems = { "More Items", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackMoreItems(&minfoMoreItems, &menuMoreItemsOptions, INFO_LOCATION_PGM);
SubMenuItem menuMoreItems(&minfoMoreItems, &menuBackMoreItems, &menuRuntimes, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSettingsSaveNow = { "Save Now", 31, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menuSettingsSaveNow(&minfoSettingsSaveNow, nullptr, INFO_LOCATION_PGM);
const char enumStrSettingsDefault_0[] = "33";
const char enumStrSettingsDefault_1[] = "45";
const char enumStrSettingsDefault_2[] = "78";
const char* const enumStrSettingsDefault[]  = { enumStrSettingsDefault_0, enumStrSettingsDefault_1, enumStrSettingsDefault_2 };
const EnumMenuInfo minfoSettingsDefault = { "Default", 30, 0xffff, 2, NO_CALLBACK, enumStrSettingsDefault };
EnumMenuItem menuSettingsDefault(&minfoSettingsDefault, 0, &menuSettingsSaveNow, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoSettingsOfst78 = { "Ofst78", 29, 29, 10000, NO_CALLBACK, -5000, 1000, "%" };
AnalogMenuItem menuSettingsOfst78(&minfoSettingsOfst78, 5000, &menuSettingsDefault, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoSettingsOfst45 = { "Ofst45", 28, 27, 10000, NO_CALLBACK, -5000, 1000, "%" };
AnalogMenuItem menuSettingsOfst45(&minfoSettingsOfst45, 5000, &menuSettingsOfst78, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoSettingsOfst33 = { "Ofst33", 27, 25, 10000, NO_CALLBACK, -5000, 1000, "%" };
AnalogMenuItem menuSettingsOfst33(&minfoSettingsOfst33, 5000, &menuSettingsOfst45, INFO_LOCATION_PGM);
const SubMenuInfo minfoSettings = { "Settings", 26, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuSettingsOfst33, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuMoreItems, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoStatusWoW = { "WoW", 25, 0xffff, 30000, NO_CALLBACK, -15000, 5000, "%" };
AnalogMenuItem menuStatusWoW(&minfoStatusWoW, 15000, nullptr, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoStatusMotor = { "Motor", 24, 0xffff, 300, NO_CALLBACK, 0, 10, "V" };
AnalogMenuItem menuStatusMotor(&minfoStatusMotor, 0, &menuStatusWoW, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoStatusCurrent = { "Actual", 23, 0xffff, 7800, NO_CALLBACK, 0, 1, "RPM" };
AnalogMenuItem menuStatusCurrent(&minfoStatusCurrent, 0, &menuStatusMotor, INFO_LOCATION_PGM);
const SubMenuInfo minfoStatus = { "Status", 22, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(&minfoStatus, &menuStatusCurrent, INFO_LOCATION_PGM);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuSettings, INFO_LOCATION_PGM);
const AnyMenuInfo minfo78 = { "78", 21, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menu78(&minfo78, &menuStatus, INFO_LOCATION_PGM);
const AnyMenuInfo minfo45 = { "45", 20, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menu45(&minfo45, &menu78, INFO_LOCATION_PGM);
const AnyMenuInfo minfo33 = { "33", 19, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menu33(&minfo33, &menu45, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    CombinedMessageProcessor::setFormTemplatesInFlash(tcMenuAllEmbeddedForms);
    setSizeBasedEEPROMStorageEnabled(false);
    glBspRom.initialise(0);
    menuMgr.setEepromRef(&glBspRom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 150);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuStatusWoW.setReadOnly(true);
    menuStatusCurrent.setReadOnly(true);
    menuStatusMotor.setReadOnly(true);

    // Code generated by plugins and new operators.
    gfx.begin();
    renderer.setUpdatesPerSecond(5);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menu33, PC8, PC10, PC9);
    remoteServer.addConnection(&ethernetConnection);
    renderer.setTitleMode(BaseGraphicalRenderer::NO_TITLE);
    renderer.setUseSliderForAnalog(false);
    installMonoInverseTitleTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(u8g2_font_prospero_bold_nbp_tr, 1), true);

    // We have an IoT monitor, register the server
    menuRuntimesIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuRuntimesAuthenticator.init();
}

// Embedded form data

const uint8_t formData_MobileFriendly_d8[] {
0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xd5,0x96,0x5d,0x6f,0x9b,0x30,
0x18,0x85,0xef,0x27,0xed,0x3f,0x58,0x96,0x76,0x97,0x2c,0x40,0x80,0xa4,0x12,0xb4,
0xca,0x12,0xb2,0x46,0x22,0x50,0x05,0x58,0xa5,0xdd,0x20,0x83,0x9d,0x0a,0xc9,0xd8,
0x15,0x98,0xae,0xf9,0xf7,0x33,0x34,0x5a,0xa0,0xd3,0x5a,0x2e,0x2a,0xc1,0x6e,0x90,
0x39,0x58,0xc7,0x8f,0x0f,0xfe,0x78,0xad,0x9b,0xe7,0x9c,0x82,0x27,0x52,0x94,0x19,
0x67,0x36,0x54,0xbf,0x2a,0x10,0x10,0x96,0x72,0x9c,0xb1,0x07,0x1b,0x46,0xe1,0x76,
0xba,0x84,0xa0,0x14,0x88,0x61,0x44,0x39,0x23,0x36,0x64,0x1c,0xde,0x5c,0x7f,0xfe,
0x64,0x39,0x79,0x42,0xf0,0x9a,0x33,0x51,0x70,0x0a,0x12,0x8e,0x0a,0x1c,0x55,0x19,
0xb6,0x21,0x49,0xb1,0x61,0x2a,0x8b,0xe3,0xd4,0x30,0x48,0x32,0xd5,0x35,0x43,0x9b,
0x22,0x43,0x95,0x0f,0x94,0x2c,0xcc,0x2b,0xdd,0xd0,0x30,0x9e,0x43,0x40,0xd1,0x89,
0x57,0xc2,0x43,0xb9,0x74,0xdc,0xf3,0x24,0xa3,0x04,0x6c,0x8b,0x8c,0x30,0x4c,0x4f,
0x50,0xba,0x03,0x60,0xed,0x09,0xab,0xdc,0xa6,0x57,0xd9,0x08,0x1d,0x09,0xa4,0x9c,
0x96,0x36,0xd4,0x20,0x38,0x4a,0x82,0x1d,0x3b,0x72,0x89,0xae,0x28,0x5f,0x20,0x28,
0x48,0x5a,0xc9,0xb9,0x3c,0x49,0x5f,0x51,0x54,0x44,0x0a,0x9c,0x8b,0x9d,0xe4,0x52,
0xe0,0xd9,0xe6,0x6c,0xe4,0x50,0x92,0x13,0x26,0x00,0xa2,0xd9,0x03,0xab,0x5b,0x36,
0x5c,0x3b,0x5e,0xe8,0x1c,0x60,0x6d,0xce,0x8b,0x80,0x48,0xe5,0x3b,0xe5,0x09,0xa2,
0xb5,0xd2,0xcc,0x33,0x3c,0x3d,0x4a,0xdf,0x6f,0x51,0x18,0xfa,0x5e,0xbc,0xf6,0xbd,
0xf0,0xe0,0xbb,0xf2,0x63,0x55,0x0a,0x9e,0x6f,0x0a,0xf4,0xab,0x4e,0x87,0xc9,0x31,
0xb1,0x6c,0xef,0x39,0x96,0x7d,0x83,0x5b,0xff,0x3e,0xf6,0x56,0x7b,0xe7,0x6f,0x52,
0x39,0x66,0x55,0x83,0xa9,0x57,0x10,0x3c,0xf2,0x32,0x13,0xcd,0x0f,0x50,0x26,0x0a,
0x9c,0x8d,0x94,0x54,0x53,0xba,0xa4,0xea,0x78,0x49,0xd5,0x36,0xa9,0x3a,0x78,0xa6,
0xf1,0x8f,0x95,0x1b,0xbd,0xc1,0x6b,0x76,0x71,0x87,0x0e,0xf6,0x3d,0xdc,0x45,0x1b,
0x57,0x1b,0x3c,0xdd,0x7f,0x83,0x2e,0xbb,0xa0,0x7d,0x72,0x75,0x9d,0x6d,0xf8,0x2e,
0xe6,0xad,0x7f,0xd8,0xfd,0x94,0x8c,0x2b,0x37,0x0e,0xdc,0xdd,0xa6,0x99,0xd8,0x47,
0x04,0xab,0xcd,0xdb,0xc0,0xf3,0x89,0xdc,0x63,0x13,0x6d,0xf4,0xd0,0x7a,0x1b,0x5a,
0xff,0x4f,0xa0,0x8d,0x36,0xb4,0xd1,0x1b,0x7a,0xa0,0xf3,0xac,0x73,0x40,0x98,0x23,
0xde,0x71,0x7a,0x17,0x74,0xe8,0x93,0xec,0x8d,0x6b,0xb7,0x73,0x45,0x2c,0xba,0x91,
0x06,0x02,0x89,0x2c,0x0d,0xc9,0x73,0xaf,0x05,0xfb,0x7a,0x88,0xb6,0xad,0x0a,0xaf,
0x03,0x9e,0x13,0x50,0x7b,0x59,0xb3,0x8b,0xef,0xb8,0x77,0x47,0x27,0x9b,0x65,0xaf,
0xe5,0xd6,0x8b,0x37,0xba,0x8b,0x37,0xfe,0xfd,0x47,0x5f,0x47,0xaa,0xd9,0xc5,0xbd,
0x2c,0x3a,0x6b,0x76,0xa9,0x19,0x5f,0xca,0xca,0x96,0xf0,0x52,0x57,0x5a,0xeb,0x33,
0x72,0x39,0x3b,0xbf,0xff,0x41,0x92,0x25,0x70,0x23,0x5a,0xb3,0x76,0xb1,0x2b,0x85,
0xdf,0x3b,0xb6,0x57,0x86,0x35,0x0b,0x00,0x00
};
const EmbedControlFlashedForm formData_MobileFriendly {
    "Mobile Friendly",
    formData_MobileFriendly_d8,
    521
};

const EmbedControlFlashedForm* tcMenuAllEmbeddedForms[] { &formData_MobileFriendly, nullptr };
