/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.3.1-SNAPSHOT on 2024-08-31T09:58:46.844277900Z.

#include <tcMenu.h>
#include "espCapTouchTft_menu.h"
#include "ThemeDarkModeTraditionalBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "espCapTouchTft", "a32450f4-91fc-4747-9e6f-6317dd9e2309" };
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
TFT_eSPI gfx;
TfteSpiDrawable gfxDrawable(&gfx, 45);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
Adafruit_FT6206 touchDevice;
iotouch::AdaLibTouchInterrogator touchInterrogator(touchDevice);
iotouch::TouchOrientationSettings touchOrientation(true, false, true);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, touchOrientation);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoPressMe = { "Press Me", 9, 0xffff, 0, NO_CALLBACK };
ActionMenuItem menuPressMe(&minfoPressMe, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoNewRuntimeList = { "New Runtime List", 8, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuNewRuntimeList(&minfoNewRuntimeList, 10, fnNewRuntimeListRtCall, &menuPressMe, INFO_LOCATION_PGM);
RENDERING_CALLBACK_NAME_OVERRIDDEN(fnRuntimesCustomRtCall, CustomTextCallbackRtCall, "Custom", -1)
TextMenuItem menuRuntimesCustom(fnRuntimesCustomRtCall, "", 7, 5, nullptr);
const PROGMEM AnyMenuInfo minfoRuntimesRGB = { "RGB", 6, 0xffff, 0, NO_CALLBACK };
Rgb32MenuItem menuRuntimesRGB(&minfoRuntimesRGB, RgbColor32(0, 0, 0), false, &menuRuntimesCustom, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoRuntimesText = { "Text", 5, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuRuntimesText(&minfoRuntimesText, "", 5, &menuRuntimesRGB, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoRuntimes = { "Runtimes", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackRuntimes(&minfoRuntimes, &menuRuntimesText, INFO_LOCATION_PGM);
SubMenuItem menuRuntimes(&minfoRuntimes, &menuBackRuntimes, &menuNewRuntimeList, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoCheck = { "Check", 3, 0xffff, 1, NO_CALLBACK, NAMING_CHECKBOX };
BooleanMenuItem menuCheck(&minfoCheck, false, &menuRuntimes, INFO_LOCATION_PGM);
const char enumStrFoods_0[] PROGMEM = "Pizza";
const char enumStrFoods_1[] PROGMEM = "Pasta";
const char enumStrFoods_2[] PROGMEM = "Salad";
const char* const enumStrFoods[] PROGMEM  = { enumStrFoods_0, enumStrFoods_1, enumStrFoods_2 };
const PROGMEM EnumMenuInfo minfoFoods = { "Foods", 2, 0xffff, 2, NO_CALLBACK, enumStrFoods };
EnumMenuItem menuFoods(&minfoFoods, 0, &menuCheck, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoPercentage = { "Percentage", 1, 0xffff, 100, NO_CALLBACK, 0, 1, "%" };
AnalogMenuItem menuPercentage(&minfoPercentage, 0, &menuFoods, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    menuMgr.setEepromRef(&glArduinoEeprom);
    // Code generated by plugins and new operators.
    gfx.begin();
    gfx.setRotation(1);
    renderer.setUpdatesPerSecond(10);
    touchInterrogator.init();
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuPercentage);
    installDarkModeTraditionalTheme(renderer, MenuFontDef(nullptr, 2), MenuFontDef(nullptr, 4), true, BaseGraphicalRenderer::TITLE_ALWAYS, false);
}

