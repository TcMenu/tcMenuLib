/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino ESP32 by TcMenu 4.3.1-SNAPSHOT on 2024-08-31T08:17:44.237948Z.

#include <tcMenu.h>
#include "esp32Amplifier_menu.h"
#include "ThemeCoolBlueModernBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "ESP Amplifier", "4656c798-10c6-4110-8e03-b9c51ed8fffb" };
TcMenuRemoteServer remoteServer(applicationInfo);
ArduinoEEPROMAbstraction glArduinoEeprom(&EEPROM);
EepromAuthenticatorManager authManager(6);
TFT_eSPI tft;
TfteSpiDrawable tftDrawable(&tft, 45);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &tftDrawable);
iotouch::ResistiveTouchInterrogator touchInterrogator(2, 33, 32, 0);
iotouch::TouchOrientationSettings touchOrientation(true, false, true);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, touchOrientation);
tcextras::IoaTouchScreenCalibrator touchCalibrator(&touchScreen, &renderer, 400);
ClientEthernetInitialisation clientEthInit("192.168.0.37", 3333);
ClientEthernetTagValTransport clientEthTransport;
TagValueRemoteServerConnection clientConnection(clientEthTransport, clientEthInit);

// Global Menu Item declarations
const PROGMEM char pgmStrConnectivityAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuConnectivityAuthenticator(pgmStrConnectivityAuthenticatorText, NO_CALLBACK, 27, nullptr);
const PROGMEM char pgmStrConnectivityIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuConnectivityIoTMonitor(pgmStrConnectivityIoTMonitorText, 26, &menuConnectivityAuthenticator);
const PROGMEM AnyMenuInfo minfoConnectivityPasscode = { "Passcode", 19, 37, 0, NO_CALLBACK };
TextMenuItem menuConnectivityPasscode(&minfoConnectivityPasscode, "", 20, &menuConnectivityIoTMonitor, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoConnectivitySSID = { "SSID", 18, 17, 0, NO_CALLBACK };
TextMenuItem menuConnectivitySSID(&minfoConnectivitySSID, "", 20, &menuConnectivityPasscode, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoConnectivityIPAddress = { "IP address", 13, 0xffff, 0, NO_CALLBACK };
IpAddressMenuItem menuConnectivityIPAddress(&minfoConnectivityIPAddress, IpAddressStorage(127, 0, 0, 1), &menuConnectivitySSID, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 12, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(&minfoConnectivity, &menuConnectivityIPAddress, INFO_LOCATION_PGM);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoStatusTest = { "Test", 28, 0xffff, 65535, NO_CALLBACK, -5000, 10, "U" };
AnalogMenuItem menuStatusTest(&minfoStatusTest, 0, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoStatusDataList = { "Data List", 21, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuStatusDataList(&minfoStatusDataList, 0, fnStatusDataListRtCall, &menuStatusTest, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoStatusShowDialogs = { "Show Dialogs", 20, 0xffff, 0, onShowDialogs };
ActionMenuItem menuStatusShowDialogs(&minfoStatusShowDialogs, &menuStatusDataList, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoStatusRightVU = { "Right VU", 16, 0xffff, 30000, NO_CALLBACK, -20000, 1000, "dB" };
AnalogMenuItem menuStatusRightVU(&minfoStatusRightVU, 0, &menuStatusShowDialogs, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoStatusLeftVU = { "Left VU", 15, 0xffff, 30000, NO_CALLBACK, -20000, 1000, "dB" };
AnalogMenuItem menuStatusLeftVU(&minfoStatusLeftVU, 0, &menuStatusRightVU, INFO_LOCATION_PGM);
const char enumStrStatusAmpStatus_0[] PROGMEM = "Warm up";
const char enumStrStatusAmpStatus_1[] PROGMEM = "Warm Valves";
const char enumStrStatusAmpStatus_2[] PROGMEM = "Ready";
const char enumStrStatusAmpStatus_3[] PROGMEM = "DC Protection";
const char enumStrStatusAmpStatus_4[] PROGMEM = "Overloaded";
const char enumStrStatusAmpStatus_5[] PROGMEM = "Overheated";
const char* const enumStrStatusAmpStatus[] PROGMEM  = { enumStrStatusAmpStatus_0, enumStrStatusAmpStatus_1, enumStrStatusAmpStatus_2, enumStrStatusAmpStatus_3, enumStrStatusAmpStatus_4, enumStrStatusAmpStatus_5 };
const PROGMEM EnumMenuInfo minfoStatusAmpStatus = { "Amp Status", 14, 0xffff, 5, NO_CALLBACK, enumStrStatusAmpStatus };
EnumMenuItem menuStatusAmpStatus(&minfoStatusAmpStatus, 0, &menuStatusLeftVU, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoStatus = { "Status", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(&minfoStatus, &menuStatusAmpStatus, INFO_LOCATION_PGM);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuConnectivity, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoSettingsSaveSettings = { "Save settings", 25, 0xffff, 0, onSaveSettings };
ActionMenuItem menuSettingsSaveSettings(&minfoSettingsSaveSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSettingsValveHeating = { "Valve Heating", 17, 15, 600, valveHeatingChanged, 0, 10, "s" };
AnalogMenuItem menuSettingsValveHeating(&minfoSettingsValveHeating, 0, &menuSettingsSaveSettings, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSettingsWarmUpTime = { "Warm up time", 11, 7, 300, warmUpChanged, 0, 10, "s" };
AnalogMenuItem menuSettingsWarmUpTime(&minfoSettingsWarmUpTime, 0, &menuSettingsValveHeating, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoChannelSettingsUpdateSettings = { "Update Settings", 24, 0xffff, 0, onChannelSetttingsUpdate };
ActionMenuItem menuChannelSettingsUpdateSettings(&minfoChannelSettingsUpdateSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoChannelSettingsName = { "Name", 22, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuChannelSettingsName(&minfoChannelSettingsName, "", 15, &menuChannelSettingsUpdateSettings, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoChannelSettingsLevelTrim = { "Level Trim", 8, 9, 20, NO_CALLBACK, -10, 2, "dB" };
AnalogMenuItem menuChannelSettingsLevelTrim(&minfoChannelSettingsLevelTrim, 0, &menuChannelSettingsName, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoChannelSettingsChannel = { "Channel Num", 23, 0xffff, 0, NO_CALLBACK };
ScrollChoiceMenuItem menuChannelSettingsChannel(&minfoChannelSettingsChannel, fnChannelSettingsChannelRtCall, 0, 3, &menuChannelSettingsLevelTrim, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSettingsChannelSettings = { "Channel Settings", 7, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettingsChannelSettings(&minfoSettingsChannelSettings, &menuChannelSettingsChannel, INFO_LOCATION_PGM);
SubMenuItem menuSettingsChannelSettings(&minfoSettingsChannelSettings, &menuBackSettingsChannelSettings, &menuSettingsWarmUpTime, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuSettingsChannelSettings, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuStatus, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoMute = { "Mute", 4, 0xffff, 1, onMuteSound, NAMING_TRUE_FALSE };
BooleanMenuItem menuMute(&minfoMute, false, &menuSettings, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoDirect = { "Direct", 3, 6, 1, onAudioDirect, NAMING_TRUE_FALSE };
BooleanMenuItem menuDirect(&minfoDirect, false, &menuMute, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoChannels = { "Channel", 2, 4, 0, onChannelChanged };
ScrollChoiceMenuItem menuChannels(&minfoChannels, 0, 150, 16, 3, &menuDirect, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoVolume = { "Volume", 1, 2, 255, onVolumeChanged, -180, 2, "dB" };
AnalogMenuItem menuVolume(&minfoVolume, 0, &menuChannels, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    menuMgr.setEepromRef(&glArduinoEeprom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 200);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuConnectivityIPAddress.setReadOnly(true);
    menuConnectivityIoTMonitor.setLocalOnly(true);
    menuConnectivityAuthenticator.setLocalOnly(true);

    // Code generated by plugins and new operators.
    tft.begin();
    tft.setRotation(1);
    renderer.setUpdatesPerSecond(10);
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuVolume);
    remoteServer.addConnection(&clientConnection);
    installCoolBlueModernTheme(renderer, MenuFontDef(nullptr, 4), MenuFontDef(nullptr, 4), false, BaseGraphicalRenderer::TITLE_ALWAYS, false);

    // We have an IoT monitor, register the server
    menuConnectivityIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuConnectivityAuthenticator.init();
}

