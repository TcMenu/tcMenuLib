/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for mbed RTOS by TcMenu 4.3.1 on 2024-09-14T20:54:48.076722800Z.

#include <tcMenu.h>
#include "stm32OledEncoder_menu.h"
#include "../ThemeMonoInverseBuilder.h"
#include <Fonts/OpenSansRegular7pt.h>

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "Demo mbed", "f5325e26-a7f6-40ff-876e-47afa06df532" };
TcMenuRemoteServer remoteServer(applicationInfo);
HalStm32EepromAbstraction glBspRom;
EepromAuthenticatorManager authManager(6);
AdafruitSSD1306Spi* gfx;
AdafruitDrawable gfxDrawable;
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
MbedEthernetInitialiser mbedEthInitialisation(3333);
MBedEthernetTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, mbedEthInitialisation);

// Global Menu Item declarations
const AnyMenuInfo minfoEdit = { "Edit", 16, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuEdit(&minfoEdit, "", 16, nullptr, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoCommits = { "Commits", 15, 0xffff, 32767, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuCommits(&minfoCommits, 0, &menuEdit, INFO_LOCATION_PGM);
const char pgmStrAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuAuthenticator(pgmStrAuthenticatorText, NO_CALLBACK, 19, nullptr);
const char pgmStrIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuIoTMonitor(pgmStrIoTMonitorText, 18, &menuAuthenticator);
const AnyMenuInfo minfoIP = { "IP", 14, 0xffff, 0, NO_CALLBACK };
IpAddressMenuItem menuIP(&minfoIP, IpAddressStorage(127, 0, 0, 1), &menuIoTMonitor, INFO_LOCATION_PGM);
const SubMenuInfo minfoConnectivity = { "Connectivity", 13, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(&minfoConnectivity, &menuIP, INFO_LOCATION_PGM);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, &menuCommits, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSaveAll = { "Save All", 17, 0xffff, 0, onSaveAll };
ActionMenuItem menuSaveAll(&minfoSaveAll, nullptr, INFO_LOCATION_PGM);
const FloatMenuInfo minfoAvgTemp = { "Avg Temp", 12, 0xffff, 1, NO_CALLBACK };
FloatMenuItem menuAvgTemp(&minfoAvgTemp, 0.0, &menuSaveAll, INFO_LOCATION_PGM);
const AnyMenuInfo minfoCountingList = { "CountingList", 11, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuCountingList(&minfoCountingList, 10, fnCountingListRtCall, &menuAvgTemp, INFO_LOCATION_PGM);
extern char choicesItems[];
const AnyMenuInfo minfoChoices = { "Choices", 10, 19, 0, NO_CALLBACK };
ScrollChoiceMenuItem menuChoices(&minfoChoices, 0, choicesItems, 10, 4, &menuCountingList, INFO_LOCATION_PGM);
const SubMenuInfo minfoOther = { "Other", 9, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackOther(&minfoOther, &menuChoices, INFO_LOCATION_PGM);
SubMenuItem menuOther(&minfoOther, &menuBackOther, &menuConnectivity, INFO_LOCATION_PGM);
const AnyMenuInfo minfoRGB = { "RGB", 8, 15, 0, NO_CALLBACK };
Rgb32MenuItem menuRGB(&minfoRGB, RgbColor32(0, 0, 0, 255), true, nullptr, INFO_LOCATION_PGM);
const AnyMenuInfo minfoFrequency = { "Frequency", 7, 7, 0, onFrequencyChanged };
EditableLargeNumberMenuItem menuFrequency(&minfoFrequency, LargeFixedNumber(8, 0, 0U, 0U, false), true, &menuRGB, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoPower = { "Power", 6, 6, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuPower(&minfoPower, false, &menuFrequency, INFO_LOCATION_PGM);
const char enumStrFoods_0[] = "Salad";
const char enumStrFoods_1[] = "Pasta";
const char enumStrFoods_2[] = "Pizza";
const char enumStrFoods_3[] = "Casserole";
const char enumStrFoods_4[] = "Soup";
const char* const enumStrFoods[]  = { enumStrFoods_0, enumStrFoods_1, enumStrFoods_2, enumStrFoods_3, enumStrFoods_4 };
const EnumMenuInfo minfoFoods = { "Foods", 5, 4, 4, onFoodChange, enumStrFoods };
EnumMenuItem menuFoods(&minfoFoods, 0, &menuPower, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoTenths = { "Tenths", 4, 2, 1000, onTenthsChaned, 0, 10, "tn" };
AnalogMenuItem menuTenths(&minfoTenths, 0, &menuFoods, INFO_LOCATION_PGM);
const SubMenuInfo minfoEditing = { "Editing", 3, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackEditing(&minfoEditing, &menuTenths, INFO_LOCATION_PGM);
SubMenuItem menuEditing(&minfoEditing, &menuBackEditing, &menuOther, INFO_LOCATION_PGM);
const AnyMenuInfo minfoRTCTime = { "RTCTime", 2, 0xffff, 0, NO_CALLBACK };
TimeFormattedMenuItem menuRTCTime(&minfoRTCTime, TimeStorage(0, 0, 0, 0), (MultiEditWireType)3, &menuEditing, INFO_LOCATION_PGM);
const AnyMenuInfo minfoRTCDate = { "RTCDate", 1, 0xffff, 0, NO_CALLBACK };
DateFormattedMenuItem menuRTCDate(&minfoRTCDate, DateStorage(1, 1, 2020), &menuRTCTime, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    glBspRom.initialise(0);
    menuMgr.setEepromRef(&glBspRom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 100);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuIP.setReadOnly(true);
    menuEdit.setReadOnly(true);
    menuCommits.setReadOnly(true);
    menuIoTMonitor.setLocalOnly(true);
    menuAuthenticator.setLocalOnly(true);

    // Code generated by plugins and new operators.
    gfx = new AdafruitSSD1306Spi(SPIWithSettings(&spi, PF_13, 10000000), PD_15, PF_12, 64, 128, ENCMODE_UTF8, SSD_1306);
    gfx->setRotation(0);
    gfx->begin();
    renderer.setUpdatesPerSecond(5);
    gfxDrawable.setGraphics(gfx);
    gfxDrawable.setFontHandler(gfx->getFontHandler());
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuRTCDate, PC_8, PC_10, PC_9);
    remoteServer.addConnection(&ethernetConnection);
    installMonoInverseTitleTheme(renderer, MenuFontDef(&OpenSansRegular7pt, 0), MenuFontDef(&OpenSansRegular7pt, 0), true, BaseGraphicalRenderer::TITLE_ALWAYS, true);

    // We have an IoT monitor, register the server
    menuIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuAuthenticator.init();
}

