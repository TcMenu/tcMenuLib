/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "stm32f429FrameBuffer_menu.h"
#include "ThemeCoolBlueModern.h"
#include <Fonts/OpenSansCyrillicLatin18.h>
#include <Fonts/RobotoMedium24.h>

// Global variable declarations
const  ConnectorLocalInfo applicationInfo = { "Factory", "4df3d784-674a-4a3d-bcee-54a49693788e" };
HalStm32EepromAbstraction glBspRom;
StChromaArtDrawable Drawable;
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &Drawable);
StBspTouchInterrogator touchInterrogator(240, 320);
iotouch::TouchOrientationSettings touchOrientation(false, false, false);
MenuTouchScreenManager touchScreen(&touchInterrogator, &renderer, touchOrientation);
tcextras::IoaTouchScreenCalibrator touchCalibrator(&touchScreen, &renderer, 400);

// Global Menu Item declarations
const AnalogMenuInfo minfoUnicodeLevel = { "Рівень", 21, 0xffff, 1000, NO_CALLBACK, 0, 10, "П" };
AnalogMenuItem menuUnicodeLevel(&minfoUnicodeLevel, 0, nullptr, INFO_LOCATION_PGM);
const char enumStrUnicodeChoice_0[] = "Салат";
const char enumStrUnicodeChoice_1[] = "піца";
const char enumStrUnicodeChoice_2[] = "борщ";
const char* const enumStrUnicodeChoice[]  = { enumStrUnicodeChoice_0, enumStrUnicodeChoice_1, enumStrUnicodeChoice_2 };
const EnumMenuInfo minfoUnicodeChoice = { "Вибір", 20, 0xffff, 2, NO_CALLBACK, enumStrUnicodeChoice };
EnumMenuItem menuUnicodeChoice(&minfoUnicodeChoice, 0, &menuUnicodeLevel, INFO_LOCATION_PGM);
const SubMenuInfo minfoUnicode = { "Unicode", 19, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackUnicode(&minfoUnicode, &menuUnicodeChoice, INFO_LOCATION_PGM);
SubMenuItem menuUnicode(&minfoUnicode, &menuBackUnicode, nullptr, INFO_LOCATION_PGM);
const AnyMenuInfo minfoDialogs = { "Dialogs", 18, 0xffff, 0, onPresentDialog };
ActionMenuItem menuDialogs(&minfoDialogs, &menuUnicode, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoSamplesBoolCheck = { "Bool Check", 22, 0xffff, 1, NO_CALLBACK, NAMING_CHECKBOX };
BooleanMenuItem menuSamplesBoolCheck(&minfoSamplesBoolCheck, false, nullptr, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSamplesLgePos = { "LgePos", 17, 0xffff, 0, NO_CALLBACK };
EditableLargeNumberMenuItem menuSamplesLgePos(&minfoSamplesLgePos, LargeFixedNumber(7, 0, 12456U, 0U, false), false, &menuSamplesBoolCheck, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSamplesRGB = { "RGB", 16, 0xffff, 0, NO_CALLBACK };
Rgb32MenuItem menuSamplesRGB(&minfoSamplesRGB, RgbColor32(255, 170, 187), false, &menuSamplesLgePos, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSamplesTime = { "Time", 15, 0xffff, 0, NO_CALLBACK };
TimeFormattedMenuItem menuSamplesTime(&minfoSamplesTime, TimeStorage(0, 0, 0, 0), (MultiEditWireType)2, &menuSamplesRGB, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSamplesText = { "Text", 14, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuSamplesText(&minfoSamplesText, "", 10, &menuSamplesTime, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoBeltSpeed = { "Belt Speed", 13, 0xffff, 200, NO_CALLBACK, 0, 100, "mS" };
AnalogMenuItem menuBeltSpeed(&minfoBeltSpeed, 200, &menuSamplesText, INFO_LOCATION_PGM);
const char enumStrBeltStatus_0[] = "Running";
const char enumStrBeltStatus_1[] = "Warm Up";
const char enumStrBeltStatus_2[] = "Stopped";
const char* const enumStrBeltStatus[]  = { enumStrBeltStatus_0, enumStrBeltStatus_1, enumStrBeltStatus_2 };
const EnumMenuInfo minfoBeltStatus = { "Belt Status", 12, 0xffff, 2, NO_CALLBACK, enumStrBeltStatus };
EnumMenuItem menuBeltStatus(&minfoBeltStatus, 1, &menuBeltSpeed, INFO_LOCATION_PGM);
const SubMenuInfo minfoSamples = { "Samples", 11, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSamples(&minfoSamples, &menuBeltStatus, INFO_LOCATION_PGM);
SubMenuItem menuSamples(&minfoSamples, &menuBackSamples, &menuDialogs, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoConnectivityEnableUSB = { "Enable USB", 10, 8, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuConnectivityEnableUSB(&minfoConnectivityEnableUSB, false, nullptr, INFO_LOCATION_PGM);
const SubMenuInfo minfoConnectivity = { "Connectivity", 9, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(&minfoConnectivity, &menuConnectivityEnableUSB, INFO_LOCATION_PGM);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, &menuSamples, INFO_LOCATION_PGM);
const char enumStrSettingsBoardList_0[] = "STM32";
const char enumStrSettingsBoardList_1[] = "ESP32";
const char enumStrSettingsBoardList_2[] = "AVR";
const char enumStrSettingsBoardList_3[] = "SAMD";
const char enumStrSettingsBoardList_4[] = "RP2040";
const char* const enumStrSettingsBoardList[]  = { enumStrSettingsBoardList_0, enumStrSettingsBoardList_1, enumStrSettingsBoardList_2, enumStrSettingsBoardList_3, enumStrSettingsBoardList_4 };
const AnyMenuInfo minfoSettingsBoardList = { "Board List", 26, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuSettingsBoardList(&minfoSettingsBoardList, 5, enumStrSettingsBoardList, ListRuntimeMenuItem::FLASH_ARRAY, nullptr, INFO_LOCATION_PGM);
AnyMenuInfo minfoSettingsDashboard = { "Dashboard", 25, 0xffff, 0, onShowDash };
ActionMenuItem menuSettingsDashboard(&minfoSettingsDashboard, &menuSettingsBoardList, INFO_LOCATION_RAM);
const AnyMenuInfo minfoSettingsCalibrateNow = { "Calibrate Now", 24, 0xffff, 0, onCalibrateScreen };
ActionMenuItem menuSettingsCalibrateNow(&minfoSettingsCalibrateNow, &menuSettingsDashboard, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoSettingsTSCalibration = { "TS Calibration", 23, 0xffff, 1, onTouchCalibration, NAMING_CHECKBOX };
BooleanMenuItem menuSettingsTSCalibration(&minfoSettingsTSCalibration, false, &menuSettingsCalibrateNow, INFO_LOCATION_PGM);
const AnyMenuInfo minfoSettingsRunDuration = { "Run duration", 8, 4, 0, NO_CALLBACK };
TimeFormattedMenuItem menuSettingsRunDuration(&minfoSettingsRunDuration, TimeStorage(0, 0, 0, 0), (MultiEditWireType)6, &menuSettingsTSCalibration, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoSettingsTargetSpeed = { "Target speed", 7, 2, 200, onTargetChanged, 0, 100, "mS" };
AnalogMenuItem menuSettingsTargetSpeed(&minfoSettingsTargetSpeed, 0, &menuSettingsRunDuration, INFO_LOCATION_PGM);
const SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuSettingsTargetSpeed, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuConnectivity, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoConsumption = { "Power", 4, 0xffff, 4000, NO_CALLBACK, 0, 1, "W" };
AnalogMenuItem menuConsumption(&minfoConsumption, 200, &menuSettings, INFO_LOCATION_PGM);
const AnalogMenuInfo minfoACLine = { "AC Line", 3, 0xffff, 2600, NO_CALLBACK, 0, 10, "V" };
AnalogMenuItem menuACLine(&minfoACLine, 2450, &menuConsumption, INFO_LOCATION_PGM);
const BooleanMenuInfo minfoPower = { "Mains", 6, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuPower(&minfoPower, true, &menuACLine, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    glBspRom.initialise(0);
    menuMgr.setEepromRef(&glBspRom);
    // Now add any readonly, non-remote and visible flags.
    menuBeltStatus.setReadOnly(true);
    menuBeltSpeed.setReadOnly(true);

    // Code generated by plugins and new operators.
    renderer.setUpdatesPerSecond(10);
    touchScreen.start();
    menuMgr.initWithoutInput(&renderer, &menuPower);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    renderer.enableTcUnicode();
    installCoolBlueModernTheme(renderer, MenuFontDef(&OpenSansCyrillicLatin18, 0), MenuFontDef(&RobotoMedium24, 1), false);
}

