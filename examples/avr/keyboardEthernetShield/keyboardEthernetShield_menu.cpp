/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "keyboardEthernetShield_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Keyboard Ethernet", "b6ee8e21-449c-4f8a-bab6-a89e3f2c68d9" };
TcMenuRemoteServer remoteServer(applicationInfo);
IoAbstractionRef ioexp_io23017 = ioFrom23017(0x20, ACTIVE_LOW_OPEN, 2);
AvrEeprom glAvrRom;
EepromAuthenticatorManager authManager(6);
LiquidCrystal lcd(8, -1, 9, 10, 11, 12, 13);
LiquidCrystalRenderer renderer(lcd, 20, 4);
MatrixKeyboardManager keyboard;
const char keyboardKeys[] PROGMEM  = "123456789*0#";
KeyboardLayout keyboardLayout(4, 3, keyboardKeys);
MenuEditingKeyListener tcMenuKeyListener('*', '#', 'A', 'B');
EthernetServer server(3333);
EthernetInitialisation ethernetInitialisation(&server);
EthernetTagValTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, ethernetInitialisation);
EthernetServer server2(3334);
EthernetInitialisation ethernetInitialisation2(&server2);
EthernetTagValTransport ethernetTransport2;
TagValueRemoteServerConnection ethernetConnection2(ethernetTransport2, ethernetInitialisation2);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoRomChoicesSave = { "Save", 23, 0xffff, 0, onSaveValue };
ActionMenuItem menuRomChoicesSave(&minfoRomChoicesSave, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoRomChoicesValue = { "Value", 22, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuRomChoicesValue(&minfoRomChoicesValue, "", 10, &menuRomChoicesSave, INFO_LOCATION_PGM);
extern char romSpaceNames[];
const PROGMEM AnyMenuInfo minfoRomChoicesItemNum = { "Item Num", 21, 0xffff, 0, onItemChange };
ScrollChoiceMenuItem menuRomChoicesItemNum(&minfoRomChoicesItemNum, 0, romSpaceNames, 7, 10, &menuRomChoicesValue, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoRomChoices = { "Rom Choices", 20, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackRomChoices(&minfoRomChoices, &menuRomChoicesItemNum, INFO_LOCATION_PGM);
SubMenuItem menuRomChoices(&minfoRomChoices, &menuBackRomChoices, nullptr, INFO_LOCATION_PGM);
RENDERING_CALLBACK_NAME_OVERRIDDEN(fnAdditionalCustomHexRtCall, customHexEditorRtCall, "Custom Hex", -1)
TextMenuItem menuAdditionalCustomHex(fnAdditionalCustomHexRtCall, "", 32, 4, nullptr);
const PROGMEM BooleanMenuInfo minfoAdditionalBoolFlagFlag4 = { "Flag4", 28, 41, 1, NO_CALLBACK, NAMING_CHECKBOX };
BooleanMenuItem menuAdditionalBoolFlagFlag4(&minfoAdditionalBoolFlagFlag4, false, nullptr, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoAdditionalBoolFlagFlag3 = { "Flag3", 27, 40, 1, NO_CALLBACK, NAMING_CHECKBOX };
BooleanMenuItem menuAdditionalBoolFlagFlag3(&minfoAdditionalBoolFlagFlag3, false, &menuAdditionalBoolFlagFlag4, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoAdditionalBoolFlagFlag2 = { "Flag2", 26, 39, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuAdditionalBoolFlagFlag2(&minfoAdditionalBoolFlagFlag2, false, &menuAdditionalBoolFlagFlag3, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoAdditionalBoolFlagFlag1 = { "Flag1", 25, 38, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuAdditionalBoolFlagFlag1(&minfoAdditionalBoolFlagFlag1, false, &menuAdditionalBoolFlagFlag2, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoAdditionalBoolFlag = { "Bool Flag", 24, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackAdditionalBoolFlag(&minfoAdditionalBoolFlag, &menuAdditionalBoolFlagFlag1, INFO_LOCATION_PGM);
SubMenuItem menuAdditionalBoolFlag(&minfoAdditionalBoolFlag, &menuBackAdditionalBoolFlag, &menuAdditionalCustomHex, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoAdditionalCountList = { "Count List", 18, 0xffff, 0, NO_CALLBACK };
ListRuntimeMenuItem menuAdditionalCountList(&minfoAdditionalCountList, 20, fnAdditionalCountListRtCall, &menuAdditionalBoolFlag, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoAdditionalNumChoices = { "Num Choices", 17, 32, 0, NO_CALLBACK };
ScrollChoiceMenuItem menuAdditionalNumChoices(&minfoAdditionalNumChoices, fnAdditionalNumChoicesRtCall, 0, 30, &menuAdditionalCountList, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoAdditionalRomChoice = { "Rom Choice", 19, 30, 0, NO_CALLBACK };
ScrollChoiceMenuItem menuAdditionalRomChoice(&minfoAdditionalRomChoice, 0, 500, 10, 9, &menuAdditionalNumChoices, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoAdditionalRGB = { "RGB", 15, 34, 0, NO_CALLBACK };
Rgb32MenuItem menuAdditionalRGB(&minfoAdditionalRGB, RgbColor32(0, 0, 0, 255), true, &menuAdditionalRomChoice, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoAdditional = { "Additional", 14, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackAdditional(&minfoAdditional, &menuAdditionalRGB, INFO_LOCATION_PGM);
SubMenuItem menuAdditional(&minfoAdditional, &menuBackAdditional, &menuRomChoices, INFO_LOCATION_PGM);
const PROGMEM char pgmStrConnectivityAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuConnectivityAuthenticator(pgmStrConnectivityAuthenticatorText, NO_CALLBACK, 30, nullptr);
const PROGMEM char pgmStrConnectivityIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuConnectivityIoTMonitor(pgmStrConnectivityIoTMonitorText, 29, &menuConnectivityAuthenticator);
const PROGMEM AnyMenuInfo minfoConnectivitySaveToEEPROM = { "Save to EEPROM", 10, 0xffff, 0, onSaveToEeprom };
ActionMenuItem menuConnectivitySaveToEEPROM(&minfoConnectivitySaveToEEPROM, &menuConnectivityIoTMonitor, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoConnectivityText = { "Text", 9, 16, 0, NO_CALLBACK };
TextMenuItem menuConnectivityText(&minfoConnectivityText, "", 10, &menuConnectivitySaveToEEPROM, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoConnectivityIpAddress = { "IpAddress", 7, 12, 0, NO_CALLBACK };
IpAddressMenuItem menuConnectivityIpAddress(&minfoConnectivityIpAddress, IpAddressStorage(127, 0, 0, 1), &menuConnectivityText, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoConnectivityChangePin = { "Change Pin", 11, 0xffff, 0, onChangePin };
TextMenuItem menuConnectivityChangePin(&minfoConnectivityChangePin, "", 15, &menuConnectivityIpAddress, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 6, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(&minfoConnectivity, &menuConnectivityChangePin, INFO_LOCATION_PGM);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, &menuAdditional, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoTakeDisplay = { "Take display", 31, 0xffff, 0, onTakeOverDisplay };
ActionMenuItem menuTakeDisplay(&minfoTakeDisplay, &menuConnectivity, INFO_LOCATION_PGM);
const char enumStrFruits_0[] PROGMEM = "Apples";
const char enumStrFruits_1[] PROGMEM = "Oranges";
const char enumStrFruits_2[] PROGMEM = "Pears";
const char enumStrFruits_3[] PROGMEM = "Plums";
const char enumStrFruits_4[] PROGMEM = "Grapes";
const char* const enumStrFruits[] PROGMEM  = { enumStrFruits_0, enumStrFruits_1, enumStrFruits_2, enumStrFruits_3, enumStrFruits_4 };
const PROGMEM EnumMenuInfo minfoFruits = { "Fruits", 8, 26, 4, NO_CALLBACK, enumStrFruits };
EnumMenuItem menuFruits(&minfoFruits, 0, &menuTakeDisplay, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoFiths = { "Fiths", 5, 6, 200, onFiths, 0, 5, "A" };
AnalogMenuItem menuFiths(&minfoFiths, 0, &menuFruits, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoLargeNum = { "Large Num", 12, 0xffff, 0, NO_CALLBACK };
EditableLargeNumberMenuItem menuLargeNum(&minfoLargeNum, LargeFixedNumber(8, 4, 0U, 0U, false), true, &menuFiths, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoDecimalTens = { "DecimalTens", 4, 28, 1000, NO_CALLBACK, 0, 10, "V" };
AnalogMenuItem menuDecimalTens(&minfoDecimalTens, 0, &menuLargeNum, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoInteger = { "Integer", 3, 4, 1000, onInteger, 100, 1, "" };
AnalogMenuItem menuInteger(&minfoInteger, 0, &menuDecimalTens, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoHiddenItem = { "Hidden item", 13, 0xffff, 1, NO_CALLBACK, NAMING_TRUE_FALSE };
BooleanMenuItem menuHiddenItem(&minfoHiddenItem, false, &menuInteger, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoAnalog1 = { "Analog1", 2, 2, 255, onAnalog1, -180, 2, "dB" };
AnalogMenuItem menuAnalog1(&minfoAnalog1, 0, &menuHiddenItem, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoTime = { "Time", 1, 8, 0, NO_CALLBACK };
TimeFormattedMenuItem menuTime(&minfoTime, TimeStorage(0, 0, 0, 0), (MultiEditWireType)3, &menuAnalog1, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    menuMgr.setEepromRef(&glAvrRom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 100);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuConnectivityAuthenticator.setLocalOnly(true);
    menuConnectivityIoTMonitor.setLocalOnly(true);
    menuConnectivity.setLocalOnly(true);
    menuConnectivity.setSecured(true);
    menuHiddenItem.setVisible(false);

    // Code generated by plugins and new operators.
    lcd.setIoAbstraction(ioexp_io23017);
    lcd.begin(20, 4);
    renderer.setUpdatesPerSecond(4);
    switches.init(ioexp_io23017, SWITCHES_NO_POLLING, true);
    menuMgr.initForEncoder(&renderer, &menuTime, 6, 7, 5, FULL_CYCLE);
    keyboardLayout.setRowPin(0, 22);
    keyboardLayout.setRowPin(1, 23);
    keyboardLayout.setRowPin(2, 24);
    keyboardLayout.setRowPin(3, 25);
    keyboardLayout.setColPin(0, 26);
    keyboardLayout.setColPin(1, 27);
    keyboardLayout.setColPin(2, 28);
    keyboard.initialise(internalDigitalIo(), &keyboardLayout, &tcMenuKeyListener, false);
    keyboard.setRepeatKeyMillis(850, 350);
    remoteServer.addConnection(&ethernetConnection);
    remoteServer.addConnection(&ethernetConnection2);

    // We have an IoT monitor, register the server
    menuConnectivityIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuConnectivityAuthenticator.init();
}

