/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "analogJoystick1306Ascii_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Space Junk", "5049a016-0d7e-4004-a183-cabe4e9cf6b8" };
AvrEeprom glAvrRom;
SSD1306AsciiAvrI2c gfx;
SSD1306AsciiRenderer renderer(20, System5x7, System5x7);
MultiIoAbstraction joystickMultiIo(200);
AnalogJoystickToButtons joystickIoXAxis(internalAnalogIo(), A1, 0.5);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoSettingsSaveAll = { "Save All", 7, 0xffff, 0, onSave };
ActionMenuItem menuSettingsSaveAll(&minfoSettingsSaveAll, nullptr, INFO_LOCATION_PGM);
const char enumStrSettingsDifficulty_0[] PROGMEM = "Easy";
const char enumStrSettingsDifficulty_1[] PROGMEM = "Medium";
const char enumStrSettingsDifficulty_2[] PROGMEM = "Hard";
const char* const enumStrSettingsDifficulty[] PROGMEM  = { enumStrSettingsDifficulty_0, enumStrSettingsDifficulty_1, enumStrSettingsDifficulty_2 };
const PROGMEM EnumMenuInfo minfoSettingsDifficulty = { "Difficulty", 6, 6, 2, NO_CALLBACK, enumStrSettingsDifficulty };
EnumMenuItem menuSettingsDifficulty(&minfoSettingsDifficulty, 0, &menuSettingsSaveAll, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoSettingsFrameRate = { "Frame Rate", 5, 4, 10, NO_CALLBACK, 0, 1, "fps" };
AnalogMenuItem menuSettingsFrameRate(&minfoSettingsFrameRate, 5, &menuSettingsDifficulty, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuSettingsFrameRate, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoHighScore = { "High Score", 3, 2, 10000, NO_CALLBACK, 0, 1, "" };
AnalogMenuItem menuHighScore(&minfoHighScore, 0, &menuSettings, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoStartGame = { "Start Game", 2, 0xffff, 0, onStartGame };
ActionMenuItem menuStartGame(&minfoStartGame, &menuHighScore, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoInstructions = { "Instructions", 1, 0xffff, 0, onInstructions };
ActionMenuItem menuInstructions(&minfoInstructions, &menuStartGame, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    menuMgr.setEepromRef(&glAvrRom);
    // Now add any readonly, non-remote and visible flags.
    menuHighScore.setReadOnly(true);

    // Code generated by plugins and new operators.
    gfx.begin(&SH1106_128x64, 0x3C);
    renderer.setGraphicsDevice(&gfx);
    multiIoAddExpander(&joystickMultiIo, &joystickIoXAxis, 5);
    switches.init(&joystickMultiIo, SWITCHES_POLL_EVERYTHING, true);
    switches.addSwitch(A2, NULL);
    switches.onRelease(A2, [](pinid_t /*key*/, bool held) {
            menuMgr.onMenuSelect(held);
        });
    switches.addSwitch(200, [](pinid_t /*key*/, bool held) {
            menuMgr.performDirectionMove(true);
        });
    switches.addSwitch(201, [](pinid_t /*key*/, bool held) {
            menuMgr.performDirectionMove(false);
        });
    setupAnalogJoystickEncoder(internalAnalogIo(), A0, [](int val) {
            menuMgr.valueChanged(val);
        });
    reinterpret_cast<JoystickSwitchInput*>(switches.getEncoder())->setTolerance(0.5, 0.05);
    reinterpret_cast<JoystickSwitchInput*>(switches.getEncoder())->setAccelerationParameters(550.0F, 4.0F);
    menuMgr.initWithoutInput(&renderer, &menuInstructions);
}

