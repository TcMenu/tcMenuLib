/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

// Generated for Arduino AVR/Uno/Mega by TcMenu 4.3.1 on 2024-10-12T11:00:32.353851500Z.

#include <tcMenu.h>
#include "nokia5110_menu.h"
#include "ThemeMonoInverseBuilder.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Security App", "0e68e7f6-2932-43f0-aae3-d4f885b7561d" };
TcMenuRemoteServer remoteServer(applicationInfo);
AvrEeprom glAvrRom;
EepromAuthenticatorManager authManager(6);
Adafruit_PCD8544 gfx(35, 34, 38, 37, 36);
AdafruitDrawable gfxDrawable(&gfx);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);
EthernetServer server(3333);
EthernetInitialisation ethernetInitialisation(&server);
EthernetTagValTransport ethernetTransport;
TagValueRemoteServerConnection ethernetConnection(ethernetTransport, ethernetInitialisation);

// Global Menu Item declarations
const PROGMEM char pgmStrAuthenticatorText[] = { "Authenticator" };
EepromAuthenticationInfoMenuItem menuAuthenticator(pgmStrAuthenticatorText, NO_CALLBACK, 19, nullptr);
const PROGMEM char pgmStrIoTMonitorText[] = { "IoT Monitor" };
RemoteMenuItem menuIoTMonitor(pgmStrIoTMonitorText, 18, &menuAuthenticator);
const PROGMEM AnyMenuInfo minfoIP = { "IP", 16, 13, 0, NO_CALLBACK };
IpAddressMenuItem menuIP(&minfoIP, IpAddressStorage(127, 0, 0, 1), &menuIoTMonitor, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoConnectivity = { "Connectivity", 15, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackConnectivity(&minfoConnectivity, &menuIP, INFO_LOCATION_PGM);
SubMenuItem menuConnectivity(&minfoConnectivity, &menuBackConnectivity, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoTxt = { "Txt", 14, 0xffff, 0, NO_CALLBACK };
TextMenuItem menuTxt(&minfoTxt, "", 6, nullptr, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoCurrent = { "Current", 10, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuCurrent(&minfoCurrent, 0.0, &menuTxt, INFO_LOCATION_PGM);
const PROGMEM FloatMenuInfo minfoVoltsIn = { "Volts in", 9, 0xffff, 2, NO_CALLBACK };
FloatMenuItem menuVoltsIn(&minfoVoltsIn, 2.2, &menuCurrent, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoStatus = { "Status", 8, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackStatus(&minfoStatus, &menuVoltsIn, INFO_LOCATION_PGM);
SubMenuItem menuStatus(&minfoStatus, &menuBackStatus, &menuConnectivity, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoRGB = { "RGB", 17, 17, 0, NO_CALLBACK };
Rgb32MenuItem menuRGB(&minfoRGB, RgbColor32(136, 119, 85, 255), true, nullptr, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoShutdownNow = { "Shutdown now", 11, 0xffff, 0, onPowerDownDetected };
ActionMenuItem menuShutdownNow(&minfoShutdownNow, &menuRGB, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoDelay = { "Delay", 7, 11, 10, NO_CALLBACK, 0, 1, "S" };
AnalogMenuItem menuDelay(&minfoDelay, 0, &menuShutdownNow, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoPwrDelay = { "Pwr Delay", 6, 10, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuPwrDelay(&minfoPwrDelay, false, &menuDelay, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 5, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(&minfoSettings, &menuPwrDelay, INFO_LOCATION_PGM);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuStatus, INFO_LOCATION_PGM);
const char enumStrOnAlm_0[] PROGMEM = "All On";
const char enumStrOnAlm_1[] PROGMEM = "Silient";
const char* const enumStrOnAlm[] PROGMEM  = { enumStrOnAlm_0, enumStrOnAlm_1 };
const PROGMEM EnumMenuInfo minfoOnAlm = { "On Alm", 4, 8, 1, NO_CALLBACK, enumStrOnAlm };
EnumMenuItem menuOnAlm(&minfoOnAlm, 0, &menuSettings, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoKitchen = { "Kitchen", 3, 6, 100, onKitchenLight, 0, 1, "%" };
AnalogMenuItem menuKitchen(&minfoKitchen, 0, &menuOnAlm, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoLiving = { "Living", 2, 4, 100, onLivingRoomLight, 0, 1, "%" };
AnalogMenuItem menuLiving(&minfoLiving, 0, &menuKitchen, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoHall = { "Hall", 1, 2, 100, onHallLight, 0, 1, "%" };
AnalogMenuItem menuHall(&minfoHall, 0, &menuLiving, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(false);
    menuMgr.setEepromRef(&glAvrRom);
    authManager.initialise(menuMgr.getEepromAbstraction(), 100);
    menuMgr.setAuthenticator(&authManager);
    // Now add any readonly, non-remote and visible flags.
    menuConnectivity.setLocalOnly(true);
    menuConnectivity.setSecured(true);

    // Code generated by plugins and new operators.
    gfx.begin();
    gfx.setRotation(0);
    renderer.setUpdatesPerSecond(4);
    renderer.setUseSliderForAnalog(false);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuHall, 2, 3, 4);
    remoteServer.addConnection(&ethernetConnection);
    installMonoInverseTitleTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), true, BaseGraphicalRenderer::TITLE_FIRST_ROW, false);

    // We have an IoT monitor, register the server
    menuIoTMonitor.setRemoteServer(remoteServer);

    // We have an EEPROM authenticator, it needs initialising
    menuAuthenticator.init();
}

